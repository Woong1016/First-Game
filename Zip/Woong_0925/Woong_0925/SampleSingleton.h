#pragma once

// 샘플 싱글턴 클래스

class SampleSingleton
{
	// 싱글턴 클래스가 마땅히 가져야 하는 것?

	// 1. 생성자(보통 다 갖고 있음)

	// 2. 소멸자 (1과 한 세트)

	// 3. 자기 자신을 지정하는 정적 데이터:
	//	-> 자기 자신을 유일무이한 존재로 지정을 해주어야 하니까

	//4. 그렇게 만들어진 정적인 인스턴스를 호출하기 위한 겟터

	//---------------------------------------------------


	//-> 다시 말해, 자기 자신이 '유일한 존재'로만 존재한다고 규칙을 정해두고
	// 밖에서는 겟터 (Get() 등으로 이름 붙인 함수) 수단을 통해서만
	// 간접적으로 데이터를 찾아올 수 있게 만들려는 것

	// -> 이게 싱글턴의 원리

	//...... 그런데 여기에 덧붙여서 한가지 더

	// 혹시 생성자가 아무데서나 만들어지면? 정적으로 만드는 의미가 없거나 오류 나거나

	//-> 생성자는 오히려 private 등으로 만드는 경우가 많다 

	//------------------------------------------------

	//여기까지 살펴본 구상을 코드로 직접 만들어보자

	
public : // 밖에서도 부를 수 있는 기능


	//리셋함수
	static void Reset() { instance = nullptr; }




	static SampleSingleton* Get(); // 겟터 함수
	
									// 이 함수를 호출하면 이 클래스의
									// 원래 데이터가 반환된다

	static void Delete();			// 소멸자 대체용

private:

	static SampleSingleton* instance; // 이 클래스의 객체
										// .... 인스턴스를 클래스 안에 만들어도 되냐?
										// 보통은 클래스로 인스턴스를 만들면 
										// 자동으로 인스턴스가 생기니 필요없었지만
										// 이건 유일무이하게 오직 하나 ㅡ 그리고 반드시
										// 하나는 있어야 하므로 클래스 안에 확실하게 만들어둔다

	SampleSingleton();					// 생성자 (밖에서 못 부름)
										// = 이 클래스 스스로가 아니면
										// 어느 누구도 인스턴스 못만듬

	//SampleSingleton(int input);			// 매개변수 있는 버전

	~SampleSingleton();					//소멸자

public:

	int data;				// 이 클래스가 가진 데이터
	




};
//샘플 싱글턴을 사용하는 인스턴스 (전역변수)
//SampleSingleton* SampleSingleton::instance = nullptr; // 처음 만들때는 아무것도 없이

