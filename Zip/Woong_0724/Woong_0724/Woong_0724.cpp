

#include <iostream>

int main()
{
	// 가위바위보

	 //1 조건문 복습
	 //2. 변수를 쓰면서 확인 할 수 있는 특성
	 //3. 변수 이름을 지을때 흔히 쓰는 방법

	// 작성 후 요약

	// 1. 조건문은 복잡한 상황도 컴퓨터에게 해결하도록 도와줄 수 있다
	// 2. 그리고 여러번 반복해야 되는 코드를 그냥 작성하다 보면
	//		똑같은 코드를 자꾸 작성해야 돼서 화가난다.

	// 이렇게 같은 코드를 힘들게 반복하는 상황을 해결할 방법이 있을까?
	// 크게 두가지로 나뉜다

	//-> 이전 지시문 (goto statement)
	// 조건문의 확장, 특정 상황에서 미리 지정한 단계로 이동하게 만드는 지시
	// 
	// 다른 하나는 반복문 (iteration)
	// : 조건문을 써서 사용하는 응용 코드, 특정 조건이 맞춰진 동안 
	//	같은 코드를 반복 수행하도록 만드는 기법

	// 이 중 우리는 이전 지시문은 알아만 보고 , 반복문을 실제로 써보도록 합시다.
	// --------------------------------------------------------------------





	 // 나와 상대방의 입력을 받기위한 숫자

	int input1;// 나
	int input2;// 상대방의 입력

	//점수를 받는다고 치고 점수를 기혹하기 위한 변수 

	int score1 = 0;
	int score2 = 0;

	//가위바위보 시작, 입력 받기 시작
	//+ 입력을 받는 장소를 좀 더 알아보기 쉽게
	std::cout << "플레이어 1 입력 :  ";
	std::cin >> input1;
	std::cout << "플레이어 2 입력 : ";
	std::cin >> input2;


	// 입력을 1번부터 3번까지만 받는다고 가정(만약 아니면 오류라고 판단 할수도 있지만 지금은 생략)
	// 첫 선수의 입력값이 무엇이었는지 확인
	if (input1 == 1)
	{
		// 첫선수의 입력을 확인한 다음 , 두번째 선수의 입력도 확인
		if (input2 == 1)
		{
			std::cout << " 비겼습니다." << std::endl;
		}
		else if (input2 == 2)
		{
			//score = 1; // 이긴사람에게 점수 부여
			// 위 코드는 무조건 1이라는 숫자를 주기만 한다

			// 대신 "원래 있던 숫자에서 1을 더한다" 라는 의미를 새로 전달
			std::cout << " 플레이어 2가 이겼습니다." << std::endl;
			score2 = score2 + 1;

			//1. 오른쪽에서 score2 읽ㄱ
			//2. 거기에 1더하기
			//3. 그 결과를 왼쪽에 있는 같은 이름의 변수에 다시 할당

			//변수의 특성 : 한번 정해진 값도 나중에 다시 바꿀 수 있다.
			// socre2 = 54654545445; // 이렇게 또 바꿔도 된다.
		}
		else if (input2 == 3)
		{
			std::cout << " 선수 1이 이겼습니다." << std::endl;
			// 위 방법을 간단하게 하는법
			score1++;
			// ++socre1 이렇게 적을 수도 있음
			//score--; 이렇게 하면 마이너스 가능
			// 이렇게 ++ -- 로 줄여서 1증가 및 감소로 나타내는 것 이것도 연산자
			// 증감 연산자
			//증감 연산자에는 다른 이름이 하나 더 붙는다.
			// 변수 이름 뒤에 붙는 증감 연산자를 " 후치 연산자" 라고 부른다
			// 앞에 붙을때는 전치 연산자 라고한다.

			//* 전치와 후치 사이에도 엄밀히 차이가 있지만 
			// 지금은 일단 ++ 를 쓰면 숫자가 1 오른다는 것만 기억하자
		}
		else//무효
		{
			std::cout << " 선수 2가  입력을 잘못했습니다. 겨루기를 무효로 처리합니다." << std::endl;

		}

	}
	else if (input1 == 2)
	{
		// 첫선수의 입력을 확인한 다음 , 두번째 선수의 입력도 확인
		if (input2 == 1)
		{
			std::cout << " 선수 1이 이겼습니다." << std::endl;
			score1++;
		}
		else if (input2 == 2)
		{
			std::cout << " 비겼습니다." << std::endl;
		}
		else if (input2 == 3)
		{
			std::cout << " 플레이어 2가 이겼습니다." << std::endl;
			score2 = score2 + 1;
		}
		else//무효
		{

			std::cout << " 선수 2가 입력을 잘못했습니다. 겨루기를 무효로 처리합니다." << std::endl;
		}
	}

	else if (input1 == 3)
	{
		// 첫선수의 입력을 확인한 다음 , 두번째 선수의 입력도 확인
		if (input2 == 1)
		{
			std::cout << " 선수 1이 이겼습니다." << std::endl;
			score1++;
		}
		else if (input2 == 2)
		{
			std::cout << " 플레이어 2가 이겼습니다." << std::endl;
			score2 = score2 + 1;
		}
		else if (input2 == 3)
		{
			std::cout << " 비겼습니다." << std::endl;
		}
		else//무효
		{
			std::cout << " 선수 2가 입력을 잘못했습니다. 겨루기를 무효로 처리합니다." << std::endl;

		}

	}
	else
	{

		std::cout << " 선수 1이 입력을 잘못했습니다. 겨루기를 무효로 처리합니다." << std::endl;

	}
	// 여기까지 오면 선수 1, 선수 2의 입력을 비교하면서
	// 각각의 경우에 따라 가위바위보에서 누가 이겼는지 알 수 있다.
	// 가위바위보의 다른 특성
	// 조건 판단에 필요한 변수는 하나뿐
	//각 조건마다 정확한 판단 기준 있음
	// 경우의 수는 오직 4개 (가위, 바위,보, 떨거지)

	// switch 문 쓰기 좋다

	// switch 코드 예시 

	// 이 안은 나중에 여러분들이 실습하시면서 채워주세요 - 집가서 해보자
	switch (input1)
		case1:
	// 나는 가위
	break;

}