// Woong_0722.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.

//과제 : 가위바위보 (조건문)

// 1. 변수 Player 1 , Player2 선언 
// 2. 입력으로 두 변수에 값을 할당하되 1~3까지 입력해주세요
// (옵션) 만약 범위 밖의 숫자를 입력하면 오류가 나고 그사람이 지게 해주세요
// 3. 두 변수에 값이 정해지면 다음 목록에 따라 가위바위보를 진행해주세요
// (입력값이 1이면 가위 2이면 바위 3이면 보 입니다.)
//4. 두 사람의 가위바위보를 비교해서 이긴 사람이 누구인지 판별하고 
// 모니터에 띄워주세요
// 5. 가위바위보를 세번 진행해주세요
//6. 각 판마다 누가 이겼는지, 그리고 누가 몇번 이겼는지도 변수로 기록해주세요
// 더 많은 변수를 만들어야 할 수 있습니다.
//7. 세번째 판이 끝났을때, 더 많이 이긴 사람이 이겼다고 출력해주세요
// 비긴경우도 포함 

#include <iostream>

int main()

{
	// 오늘 들어갈 부분을 위해 꼭 알고 있어야 하는 것
	// 
	// 1. 변수
	// 2. 연산과 연산자


	// 예시 사항
	// int number = 10 ; // 선언 및 할당 
	// int input0; // 선언만 

	// std :: cout << number/ input << std::endl;
	// -> number로 지칭된 숫자를, input0로 지칭된 숫자로 나눈 뒤 그대로 출력하기
	// 할당된 값 없이 출력하면 오류

	//input0에 값주기
	// (코드)std :: cin>> input0; // 입력을 통해서 값을 정하기 

	// 그론데 입력을 0으로 하면 어떻게 될까?
	//c++에서는 수없이 계산을 반복하다가 제풀에 프로그램이 뻗어버린다

	// 그러면 오류가 난 다음에 출력을 해야 되는 코드를 짜면?
	// 코드) std:cout<< "숫자 계산을 했습니다." std::endl;
	// -> 0으로 나누면 출력도 못하고 컴퓨터가 뻗는다

	// 위와 같이 0을 입력하면 -> 오류가 나는 상황르 막기 위해 
	// 우리는 컴퓨터에게 0을 입력하면 그냥 나누기를 하지 말라고 지시할 수 있다

	// 그리고 이를 확장해서 "A라는 경우가 있다면 B라고 처리하고 
	// A라는 경우에 해당하지 않으면 D라고 처리하라

	//이를 조건문 condition expression이라고 한다

	// ========================================
	// 조건문의 기본적인 형태

	int condition1 = 10; // 이 숫자가 0일 때와 0이 아닐때를 수정하면서 확인

	// 조건문은 작성전에 , "무엇이 조건이 될 수 있는지를"제시할 수 있는
	// 데이터가 있어야 한다. (숫자든 , 다른 어떤 데이터든)
	// 여기서 조건이란 : 따져봐서 맞는지 틀렸는지 알 수 있는 명제 , 혹은
	//					질문의 형태를 띤 데이터


	if (condition1 == 0)
		// if: 조건문이 시작된다는 표시 (만약~)
		// if 뒤의 (): 이안에 들어가는 것이 조건 (여기서는 "condition1 숫자는 0인가)
		// if (조건) 뒤의 : {}는 코드의 시작과 끝
		//					여기서는 if에서 제시된 (조건)이 맞으면 {}안의
		//					코드를 수행하라는 의미
	{
		//condition1의 숫자가 0이었다면 아래 출력 코드를 수행
		// 0이 아닐 때는 수행 안함
		std::cout << "이 숫자는 0입니다" << std::endl;
		// 그리고 다음 }까지가 조건문 이 뒤로는 다시 조건문이 아니게 된다
	}
		//다음 출력 코드는 condition1이 숫자가 무엇이든 출력
		std::cout << "조건문 1을 종료합니다." << std::endl;

	//도식화 하면 조건문은 다음과 같다

	// if (조건) {참인 경우의 코드
	// -> 문법상 주의점 : 조건문은 반드시 저 기호가 다 쓰여야한다
// ... { 기호까지 쓰고 ,} 기호를 빼면 오류 . 심지어 조건문으로 코드가 끝나도 

// -------------------------------------------------

// 조건문을 실제로 사용한 ㅡ 아까의 나누기 출력을 다시

int	number10 = 10; // 10 나누기

int div0 = 0; // ...0

if (div0 != 0) // 나눌 대상이 0이 아닌 경우라면 
{
	int result10div0 = number10 / div0;// 계산 진행

	std::cout << result10div0 << std::endl;
}

// 그리고 조건문의 기본 형태에 이어서 추가 문법도 사용
// 조건문의 특징: {} 뒤에 적절한 명령어를 (지시어) 덧붙이면 조건문을 확장가능


//그렇게 사용하는 확장 명령어의 1번쨰 이자 가장많이 쓰이는 것

else// 앞서 제시한 조건이 (혹은 조건들이) 모두 틀렸을 경우 
			// 다음{} 안에 있는 코드를 수행하라는 의미

{
	// 지금 같은 경우는 div0 값이 0이라는 뜻이니까 (앞선 조건이 틀렸으므로)
	// 0으로 나눅 될 떄 컴퓨터가 수행할 일이라는 의미


	std::cout << "0으로는 나눌 수 없습니다." << std::endl;
}

std::cout << "10 나누기 숫자를 종료합니다. " << std::endl;

//-------------------------------------------------------------------

// 실제 써본 조건문과 확장과 확장에 이은 복수 조건까지 사용해보기
// -> 조건문은 조건을 2가지 이상 제시할 수도 있다.
// -> 이 표현은 다시 2가지의 중복되는 의미를 다고 있지만 참고로 다 된다
// 우선 조건이 여러가지인 경우 (사전적인 의미에서)

int numberA = 10;
int numberB = 11;

if (numberA == numberB)// 두 숫자가 콕 집어서 똑같은가
{
	std::cout << "이 숫자는 0입니다" << std::endl;

}
else if (numberA <= numberB) // A가 B보다 크거나 같은가?
// else if : 앞에 있던 조건은 틀렸는데 , 지금 제시한 조건은 맞추는지 보는 것
// 비교했더니 A가 B보다 작거나 같은가?
// 비교하는 것도 조건으로 쓸 수 있다.(결과가 bool)
{
	std::cout << "A가 B보다 큽니다." << std::endl;


}
else if (numberA > numberB)// A가 B보다 큰가?
{

	std::cout << "A가 B보다 큽니다" << std::endl;
}
else// 위의 어떤 경우에도 해당되지 않는다면 
{
	//else 가 많이 쓰이지만 , 필수까지는 아니다
	//else if 조건이 충분히 꼼꼼하게 만들어지면 else 만들어도 
	// 실행할 기회가 오지 않을 수 도 있다.

	// int 두 개의 비교결과, 크거나 작거나 같거나 ... 외에 다른 결과는 없듯이.
	std::cout << "A와 B를 비교할 수  없습니다 ." << std::endl;
}

//--------------------------------------------------------------

//복수 조건에 의한 조건문 2
// : 조건 1과 조건 2를 동시에 보는 것
// -> 그래서 이 둘이 맞는지 틀렸는지 보기

int numberC = 100;
int numberD = 100;
int numberE = 100;
int numberF = 100;

if ((numberC == numberD)// () 속의 다시 () 안을 일단 보고....
 &&(numberE == numberF)) // 논리곱 연산자 + 작은 조건을 하나 도 제시
// 의미 : 숫자 C와 숫자 D가 같고 , 또한 , 숫자 E와 숫자F도 같은가?
// c계열 프로그래밍 언어의 장점: 각 단어나 연산자 사이에는 띄어 써도 된다.
{
	std::cout << "c와 D는 같고 E와 F도 같습니다"<<std::endl;
}
// 논리곱&& , 왼쪽도 맞고 오른쪽도 맞아야 한다 를 써서
// 복수의 조건을 동시에 판단할 수 있다.
// &&는 여러 개도 쓸 수 있다 (조건1 && 조건2 && 조건3 && 등등..)

// 또한 논리합||도 사용가능
if ((numberC == numberD) || (numberE == numberF))
{
	std::cout << "C와D가 같거나 ,E와 F가 같거나 , 혹은 모두 서로 같습니다. " << std::endl;
}
// 논리합의 경우 , 이해할 수 있는 좀 더 심화적인 이해도 있지만 ...
// 다음기회에 하는걸로

//---------------------------------------------------------------------

//복수 조건에 의한 조건문 3 
//-> 조건1이 맞는 상황에서, 조건 2를 또 보는 것
// -> 조건문 속에 또 다른 조건문 

int numberA1 = 100;


if (numberA1 < 1000)// 숫자 A1은 1000보다 작은가?

{
	std::cout << "숫자 A1은 1000보다 작습니다 " << std::endl;
	// 위 코드를 출력한 다음, 조건을 하나 더 따진다 (if 속의 if)

	if (numberA1 > 0)
	{
		// "1000보다 작기" 조건이 만족되더라도 , 0보다 작은 음수라면 조건이
		// 틀릴 수 도 있습니다
		// 
		//여기 있는 코드가 실행된다면 , A1은 1000보다는 작고 0보다 클때 밑에
		//조건문이 출력된다.

		std::cout << "숫자 A1은 세 자릴 수 이하의 자연수 입니다." << std::endl;
	}
}
// 이렇게 , 조건문 안에는 다른 조건문을 넣을 수도 있다.
// 이렇게 최대 몇번까지도 조건문 속에 다른 조건문을 넣을 수 있냐면
// 컴퓨터의 성능만큼 넣을 수 있다.

// 개발자가 조심해야 되는 이유

// 1. 그냥 할 수 있다고 조건문을 막 쌓으면 컴퓨터가 고장나기보다
// 본인이 먼저 헷갈린다.!!!

// -> 사람에 의한 실수를 줄이기 위해서 조건문은 가능한 한 덜 겹치는 편이 좋다.
// -> 라고는 해도 미래에 어차피 3중첩 4중첩 등이 이루어지기도 하므로 더 조심하자

//2. 컴퓨터마다 조건문을 감당할 수 있는 한계가 다르다.
//(현재는 다소 비현실적인 지적)

//-------------------------------------------------------------------


// if 문 외에 존재하는 또 다른 조건문

// switch라고 하는 명령어 사용 : switch문 

// 사용 예시

int conNumber = 0; // 조건 숫자 제시

switch (conNumber)// 위에 있는 변수 이름을 그대로 넣기
{
case 0: // ()속 변수의 값이 0인 경우 (=case)
	// 변수의 결과에 따라 출력되는 값이 달라짐
	// 수행코드
	std::cout << "스위치 숫자는 0입니다" << std::endl;
	break;
	// break : 중단의 의미를 가지는 명령어 "여기까지만 수행한다라는 코드"
	// break가 없을 경우 , 코드 수행이 멈추지 않아 아래쪽 코드까지 연장해버림
	// 우선은 break를 되도록 지켜서 작성해주세요.
case 1: 
	std::cout << "스위치 숫자는 1입니다" << std::endl;

	
	break;


case 2:
	std::cout << "스위치 숫자는 2입니다" << std::endl;

	break;

	// () 속의 
default: // default "가만히 있음" 프로그래밍이나 게임에서는 "기본 값"
	std::cout<< "스위치 숫자는 0,1,2가 아닙니다." << std::endl;
	if (conNumber > 0)
	{
		std::cout << "숫자는 양수입니다 " << std::endl;
	}
	// 조건문 속 조건문은 서로 명령어가 달라도 쓸 수 있다.
	// (if 문 속 switch문 속 if , if속 if ,switch 속 switch모두)

	// 응용만 잘하면 매우 복잡한 질문도 조건문으로 해결 간으
	//-> 개발자가 헷갈리면 오류의 온상이 되기도 하는 ...

	// 기초이자 최고 응용이 바로 조건문

	break;
}


//----------------------------------------------------

// if문과 switch문은 뭐가 다른가?

// 왜 다른가 ? 각 조건문은 정확히 무엇을 대상으로 하는가?

// if문의 의미 : 정해지지않은 질문을 자유롭게 듣고 판단하는 bool 조건문
// -> 1. 개발자가 먼저 직접 질문을 구성하고 2. 컴퓨터는 bool로 판단
// "~~~라는 질문을 할건데 맞습니까? 맞으면 {}를 수행하세요. 틀렸으면 하지마세요

// 조건 자체가 애매한 경우 (숫자 N이 비교대상보다 큰가요?)
// 숫자 N의 값이 불확실할때 조건보다 크면 사용하면 좋음
// 혹은 조건이 정확히 뭔지 아직 모를 때
// 
//->조건 여러개를 동시에 봐야 할 때 (이 조건도 보시고 , 저것도 같이 보시고)


// -> 조건을 구성하는 데이터가 1개보다 많을 때  (숫자 N도 보시고 F도 보시고)

// 위와 같은 경우라면 if문이 좋다.

// switch문의 의미: 고정된 하나의 데이터를 참조해서 경우의 수에 따라 
// 분기를 나누는 조건문

// -> 1. 데이터 하나만 개발자가 주면 2. 컴퓨터는 값에 대응해서 결과를 출력
//~~~ 라는 숫자를 줄거고, 0이면 이래주시고, 1이면 저래주세요

// -> 데이터가 애매하면 사용불가 (float이 c++에서 사용불가)
// -> 비교조건등의 " 조건이 애매한 질문 " 사용불가 (A>B이런 질문 불가)
// -> 따로 bool 변수를 만든 후 그안에 결과를 담은 경우라면,
// 다른 프로그래밍 언어 혹은 라이브러리에서는 가능 


// -> 오직 하나의 조건만을 대조하고 ,경우의 수가 무엇인지 개발자가 정확히 알 때
// switch 문은 가장 빛을 발한다.

// 대표적인 사례 : 가위바위보에서 상대방이 낼 손의 경우의 수 

// 그리고 .... 둘 다 써도 되는 상황이면, 쓰고 싶은 대로 써도 oK

// =====================================================================

// 세 번째 조건문 if switch문과 같은 

// 삼항 연산자 -> 조건 연산자를 통해서 항 세개 (조건 , 할당1,할당2)를 쓰는
//					변수 할당 방법이라서 (삼항 연산식이라고도 한다.)

int B1 = 10;
int B2 = 20;

int compare = (B1 > B2) ? 33 : 100;
// compare 숫자를 넣을건데 , 한 가지 조건을 살펴서 그 결과에 따라
// 둘중 하나의 숫자를 넣겠다는 계산식 

// (A>B): 값을 넣을 때 살펴볼 조건의 내용 A가 B보다 큰가?
// (A> B) 뒤의 ? 기호  (A>B)계산을 조건으로서 살펴보라는 조건 연산자 
// =? 연산자는 if , switch문과 같은 등급

// ? 기호 직후의 데이터 (33): A>B 조건이 참이였다면 들어갔을 숫자
// : 기호 : B1>B2 조건이 틀렸을 경우 (거짓일 경우 ).....를 뜻하는 기호(연산자)
// : 기호 이후의 데이터 (100) : 조건이 틀렸을 때 들어가는 숫자
// 한줄 요약 : "B1와 B2를 비교해서, 앞쪽이 크면 이숫자는 33이고
// 틀리면 100이다

std::cout << compare << std::endl;
// 비교 결과 출력 
}

