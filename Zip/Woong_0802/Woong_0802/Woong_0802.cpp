

#include <iostream>

// 과제? : 


// * 주말 과제 : 빙고 

// 1. 5x5 배열 사용				5ㄷ5 배열 사용

//2. 빙고 판에는 1~25까지의 숫자가 랜덤으로 들어갑니다.		한 배열을 사용해서 1부터 25 만들고 거기서 랜덤 값 결정

//3. 빙고 판에  각 숫자를 중복되지 않도록 랜덤으로 배치해주세요 .		이거는 강사님이 알려주신거 확인

// 4. 플레이어는 가로 몇번째 , 세로 몇 번째 칸을 지우려는지 입력하게 해주세요

// 5. 입력이 들어온 칸은 지우집니다. " 지워졌음을 눈으로 확인할 수 있게 해주세요	input 1 이 입력되어 있는 배열값과 같으면 지워지게 하기

//	(숫자가 바뀌어도 되고 다른 문자로)

// 6. 가로 , 세로 , 대각선 어느 방향으로든 한줄이 모두 지워지면 빙고 한줄이 됩니다.	(가로 한줄을 없앤다고 생각하면 arr[0][0]&& [0][4] 

// 7. 빙고가 5줄이 되면 게임이 끝나게 해주세요	// 논리 연산자로 해결하기

// 여기까지가 1단계 1단계까지는 필수

// 2단계(옵션) 조건문 응용

//플레이어가 지우려는 빙고 칸을 좌표가 아닌 숫자로 입력하게 해주세요

//21이라고 입력하면 21이 있는 칸이 어디든 그곳이 지워지게 해주세요

//3단계 순서 구현

// 2인용을 만들어주세요 랜덤 판도 2개 입력받는 과정도 2번입니다.

// 여기서 포인트는 1인용이 입력하면 2인용 칸도 지워져야 한다는 겁니다

//1인용이 한칸을 지우면 (입력한 숫자든 좌표든 )지운칸의 그 숫자가 있는
//2인용 판에서는 칸이 지워져야 한다는 겁니다,

//4단계 컴퓨터와 하는 상호작용

// 컴퓨터가 2인 용의 역할을 맡게 해주세요 컴터가 자동으로 진행할 수 있도록

// 나머지는 3단계와 비슷합니다

//5단계	최초의 게임 AI


// 4단계에서 컴퓨터가 2인용의 역할을 맡기는 하는데  어떻게 할지는 자유

// 다른말로 랜덤이어도 됩니다.

//하지만 마지막 단계에서는 컴퓨터가 최선의 수만을 두도록 해주세요


// 참고로 하나 빼고 모두 배운 것만으로 해결 가능

// 다만 , 우리가 과정이 끝날때쯤 되면 5단계가 가능해질겁니다.

// 다른말로 지금 5단계를 스스로 궁리할 수 있게 되면 나머지 과정도
// 어느정도 편해집니다.

//그래도 5단꼐가 만약 되면 아마 재미있을 겁니다. 도전이 아니라 무조건 해라 박진웅

//======================================================================








// 코드가 길어질때 청소하는 법 1: 차례와 머릿말

// 코드를 작성하다 보면 , 전방 선언의 중요성이 점점 커지게 마련
// 특히 c++운 ㅁㅎ둔 대아토거 존방 선언이 되어야만 실행도 가능하다
// 그런데 그렇다고 main 위에 모든 데이터를 전방선언하기 시작하면
// 귀찮고 화도 나고 실수도 한다.

// 그러므로 가능하면 전방선언을 줄이거나 할때 하더라도
// 선언만 담당하는 별도의 자리를 하나 더 만들어서
// 거기서 그냥 선언을 쭉 해치우는 편이 좋지 않을까?

// 말하자면 "차례(헤드 오더)" 혹은 머릿말 (헤더)

// 마침 c++에도 사실은 c에서부터 그런 기능이 있다
// 언어만든 본인들도 이게 귀찮고 열 받고 실수하기 쉬운걸 안다

// 그 기능을 헤더라고 한다.(Header)

// 헤더의 역할:ㅣcpp 파일(실제 코드파일)에서 연산 할 때
//				먼저 알아두어야 할 자료를 미리 제시하는 것
//			
//				여기에는 함수, 변수, 그리고...
//				(필요한 경우) 함수와 변수의 실제 내용까지도 포함된다.

//	헤더를 직접 만들고, 불러와보자
// 1. 이 프로젝트에서 헤더 추가하기 (파일이름 : Header.h)
// 2. 추가 방법 : 파일 옵션 , 혹은 탐색기 폴더 아이콘 우클릭 후,
//					[새로 만들기 > 파일 ] 혹은 [추가 > 새항목] 선택하고 헤더 파일을 작성

// 3. 부르기 방법 : main() 실행전에 #include 명령어 다음에
//					""사이에 파일 이름 넣어서 부르면 된다

#include "Header.h" // 직접 만든 헤더 파일 부르기

// 이렇게 부르면 헤더 파일에 있었던 코드 내용이
// 마치 main() 함수 위에 다 작성된 것처럼 미리 읽혀지게 된다
// 이과정을 " 포함" 혹은 사전 준비라고 한다(=include)

// 우리가 이전에 썼던 #include <stdlib. h > 이 코드도 사실 헤더를 부른 것
// c++의 모든 표준 기능을 함수 실행전에 미리 읽어온 것

// 그런데 stdlib.h 파일은 <> 로 부르고 우리 파일은 "" 로 부르는가?

// 로딩 위치 때문 <> 는 컴퓨터에 설치된 언어 폴더에서 읽는다
// (그리고 윈도우에는 ms c++ 버전 x가 원래 깔려 있다)
// 반면 "" 기호를 쓰면 프로젝트 폴더에서 읽는다
// 그래서 같은 파일이라도 폴더 위치가ㅏ 달라지면 <> 냐 "" 냐가 달라질 수도 

int main()
{
	TestFuntion();// 호출

	// 매개변수가 있고 , 반환이 있는 함수도 호출
	int A = 10;
	int B = 20;

	std::cout << A << "+" << B << "=" << TestSum(A, B) << std::endl;

	// 헤더에서 내용까지 만든 함수를 호출해보기

	HeaderFunction(); // 헤더 함수 호출

	// 이게 되는 이유는 헤더에서 확인

	int numberToEXP = 3;
	int countToEXP = 2;

	std::cout << countToEXP << "^" << numberToEXP << "=";
	std::cout << EXP(countToEXP, numberToEXP) << std::endl;

	//^: C++에서는 다른 용도로 쓰이는 연산자이지만
	// 다른 언어에서 더 옛날부터 요즘까지 거듭 제곱이라는 의미로 쓰기도 한다
	// 그래서 여기서도 c++에는 안맞지만 그냥 써본다

	// 헤더에서 만든 변수도 호출해보기

	std::cout << headerNumber << std::endl;

	justNumber = 3000;

	std::cout << justNumber << std::endl;

}

// main () 함수 밑에 헤더에 있던 함수 내용적기
// main() 위에 함수 선언이 없었더라도 (*) 헤더에 함수 이름이 있으면
//똑같은 이름의 함수를 여기서 선언을 하면 내용이 있는걸로 칠 수 있다.

void TestFuntion()
{
	std::cout << "헤더에 있던 함수를 수행합니다" << std::endl;



}

// 엄밀히 말하면 헤더가 미리 읽는 것 이니까
// 헤더에 함수 이름을 적었다 =main() 위에 함수 이름을 쓴거나 다름없기는 하다
//
int TestSum(int x, int y)// 자료형,함수이름 ,매개변수까지 일치해야 한다
{
	int result = x + y;
	
	return result;
}	




// 함수의 이름뿐만 아니라 내용도 마찬가지?


int EXP(int number, int expCount)
{

	// 반복문

	int result = 1;
	
	for (int i = 0; i < expCount; i++)
	{
		// result = result * number; //혹은 아랫줄 코드
		result *= number; // 사칙 연산의 줄임표현

		// 원래 있던 변수에 특정한 숫자를 연산한 후 본래 변수에 피드백하는 경우
		// = (덮어 씌우는 경우), 산술 연산자를 할당 연산자 왼쪽에 붙여 쓸 수 있다.

		// a=a+1 왼쪽 코드는 a += 1 이렇게 표현가능
		// b = b- 1 왼쪽 코드도 b -= 1ㅇ 이렇게 표현 가능

		// *./ 역시 *= /= 이렇게 줄여서 표현 가능




	}

	return result; //결과 공유하기





}









// 