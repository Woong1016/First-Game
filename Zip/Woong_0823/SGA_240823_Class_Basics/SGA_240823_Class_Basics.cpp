// SGA_240823_Class_Basics.cpp

//과제 

// 사칙 연산 계산기를 이번에는 클래스로 만들기


// 1. "계산기" 클래스 만들기

// 2. 해당 클래스에는 다음 요소가 꼭 들어가야 합니다.

// - 두 숫자 (int 혹은 float ),사칙연산을 위한 4개의 함수

// 3. 해당 클래스의 인스턴스를 main()에서 만들어주세요

// 4. 그리고 두 숫자의 값을 main()애서 할당해주세요

//(접근 지정자를 쓰든 , 다른 함수를 작성하든 , 자유)

// 5. main()에서, 계산기 객체의 , 사칙 연산 함수를 사용해주세요


// 6. 사칙 연산을 수행한 결과를 모니터에 출력


#include <iostream>
#include "SampleOfThePrevious.h"
#include "MyClass.h" // 클래스 파일 포함
int main()
{
	





    // ----- 복습 및 배경 확인 -----

   //TwoMonsters();  // SampleOfThePrevious 함수
     //TestEnum();     // SampleData 샘플함수

    // * 헤더 속 헤더의 코드를 main()에서 부르는 것도 가능
    // SampleData.h 속 코드를 호출하기
 
    // Monster sprigatito; // 고양이는 꽥꽥// 허걱// 
    // sprigatito.name = monsterNameList.name_001;
    // std::cout << sprigatito.name << std::endl;

    // ----------------------------

	// 복습 및 배경 확인에서 우리가 알 수 있는 것

	// 구조체의 정리 , 사용방법, 사용사례
	// 열거형의 작성, 출력

	// -> 여기서 우리가 문제임을 확인한 것

	// 1. 열거형의 경우 , 열거화한 숫자에 붙인 이름이 중복되면 오류

	// 2. 문자열을 수정 못하는 거 너무 귀찮다. (C 및 C++ 기본 기능의 한계)

	// 3. 구조체는 왜 상수를 못 쓰나? 상수 좀 쓰게 해달라!

	// 4. 그래서 상수 포인터를 쓰는건 알겠는데 ... 그 때 사용한
	// 원시 데이터가 결국에는 자꾸 눈에 밟히지 않는가


	// 쓰지 말라고 했다 한들 Monster의 _var0000을 누가 불러내서 썼다면
	// 이거 어떻게 막을 건가?

	// 다른 말로 , "데이터를 아예 눈에도 안보이게 만들 수는 없을까? " = 보안 문제

	// 5. 구조체가 대상의 개념화인 건 알겠는데 ... 그래서 왜 데이터만 있느냐?

	// -> 개념의 대상이면 이거 행동도 할 수 있어야 되는거 아니냐>

	// 다른말로 이 안에 함수도있으면 좋은거 아니냐?


	// ===================================================================================================================================================================================


	// 요약

	// 1.데이터가 완전히 다른 데이터와 구분돼서 순수하게 구분될 수 있고

	// (완전 독립이 이루어져서 중복 자체가 일어날 수 없고)

	// 2. 불필요한, 혹은 위험한 데이터를 바깥에 일절 보여주지 않으며

	// 3. 해당 ' 자료형(혹은 비슷한 뭐라도)'을 쓰는 입장이라면
	// 꼭 써야 되는 기능만 간단하게 보여주고


	// 4.이 안에는 데이터만 아니라 해당 개념이 갖출 법한 '행동' 까지도
	//미리 작성되어 있는 

	// 위 서술을 용어로 줄여보면 : ' 독립, 2. 은닉 , 3. 캡슐화(은폐 , 간편) ,4. 주체화 //되게 범죄 용어 같네..


	// 이렇게 4가지를 전부 이뤄낼 수 있는 새로운 개념이 필요해진다.

	// 다시말해 , 데이터로서만 아니라, 데이터도 당연히 있고

	// 그 안에 실제 행동기능 =(함수)까지 전부 들어있는
	// 그런 가상의 개념 범위가 있어야 된다.

	//c++에 , 그리고 에서부터 이 기능을 구현하는 방법이 있다.

	// 그 방법을 "클래스" 라고 한다.// 올 것이 왔구나...


	//-----------------------------------------------------------------------


	// *클래스 작성 전 팁: 클래스는 ' 다른 데이터와 완전 독립 구분된다'는 특성과
	// 함수가 들어간다' 는 특성상 (= 적다보면 길어지기 쉽다 = 읽기 귀찮아진다)
	// 대체로 별도 파일에 작성하는 경우가 많다. - > 별도 파일 작성 추천

	// *파일 > 새로 만들기 > 파일 혹은 솔루션 탐색기 우클릭 >추가 > 새 파일(클래스)

	// ... 을 한다음 클래스 선택 > 클래스 이름을 지정

	// -------------------------------------------------------------------------

	// 클래스 작성을 MyClass.h 에서 진행하고 여기서 선언 및 호출

	MyClass myClass; // 변수 호출


	// 즉 구조체 처럼 클래스도 그 자체로는 아직 진짜 데이터가 아니다
	// -> 일종의 설계도 혹은 자료형 비슷한 뭔가 이다


	// 실제로 이걸사용하려면 위처럼 ' 클래스 자료형의 변수' 를 만들어야 한다
	// 역시 구조체와 마찬가지로 , 이 클래스를 통해서 만든 진짜 데이터는
	

	// 이제 '변수'가 아닌 '인스턴스' 로 부른다.

	// 위 선언에서 MyClass 는 클래스 , myCLass가 인스턴스

	// 특히 기능 즉 함수를 포함하기 때문에 변수라는 말은 부적절하기도 하다

	

	// 그리고 여기서 원본 설계도가 된 클래스와
	// 그 클래스에서 실제로 만든 인스턴스 이 둘을 하나로 합쳐서

	//"객체"라고 지칭한다 (Object)


	// 그리고 위에서 만든 인스턴스 속 변수 a,b를 사용해보기


	//::cout << myClass.a << std::endl; // 구조체처럼 안의 변수 출력하기

	//std::cout << myClass.b << std::endl;// 했는데 안된다? 오류가 난다?


	// 이것이 클래스의 첫 번째 장점.
	// 만든 사람이 허락하지 않았으면 클래스 안에서 만들었어도
	// 밖에서 호출하는 입장에서는 변수 a,b를 사용할 수가 없다
	// 그뿐만 아니라 애초에 그런 변수가 있는 줄도 모른다 (안보인다)
	// 이것이 은닉, 은폐(캡슐화)의 구현


	//따라서 클래스에서 작성된 데이터든 , 함수든 , 밖에서 사용하려면
	// 작성하는 쪽에서 쓸 수 있게 허락을 해줘야 한다.

	// 그렇게 허락한다는 지시를 작성한 코드를 '접근자' 혹은 '(접근)지정자' 라고 한다.

	// 실제 작성은 클래스에서.


	// MyClass에서 만든 public 접근 지정자 데이터 사용

	std::cout << myClass.x << std::endl;
	std::cout << myClass.y << std::endl;

	// 클래스에 익숙해지는 동안에는 public으로 그냥 다 작성해도 무관



	//private 작성 // 오류 발생
	//std::cout << myClass.f << std::endl;
	//std::cout << myClass.d << std::endl;

	// 클래스에서 작성된 함수도 호출

	myClass.PrintAnB(); // public 아래 작성된 함수이므로 불러오기 가능

	// main()에서는 볼 수 없었던 a와 b를 확인 가능

	// 왜냐면 저 a와 b를 출력하는 기능은 PrintAnB함수 안에 있는데,
	// 그 함수를 실행한 주체는 main() 앱이 아니라 myClass니까
	// myClass 입장에서는 a와 b는 자기 안의 내부 데이터인 것

	// -> 그 내부 데이터를 myClass안에서 고치고 출력하는 것도 되는가?
	// 함수 작성후 시험해보기

	myClass.SetNumberToAnB(50000, 7000); // 새로운 숫자를 부여

	std::cout << myClass.AddAnB() << std::endl;


	// 이렇게 클래스를 인스턴스로 사용할 수 있다

	// 정리하면

	// 1.구조체와 비슷한 방법으로 클래스를 작성할 수 있다.

	// 2. 클래스 안에는 변수만 아니라 함수도 작성할 수 있다.

	// 3. 클래스 안에 작성된 데이터는 기본적으로 밖에서 볼 수 없다.
	//		클래스와 클래스의 인스턴스를 합쳐 객체라고 부른다.

	// 4. 클래스 안에 작성된데이터는 기본적으로 밖에서 볼 수 없다.

	// 5. 하지만 접근 지정자 public을 사용하면 밖에서 볼 수 있게 만든다.

	// 6. 함수 선언은 .h에서 , 실제 내용 작성은 .cpp에서 하면 좋다.

	// 7. 클래스 함수를 작성할 때는 클래스 이름을 앞에 붙여줘야 한다.
	//		그래야 컴퓨터가 알아본다.

	//여기까지가 클래스의 기초 사용법 // 복습하기.


}