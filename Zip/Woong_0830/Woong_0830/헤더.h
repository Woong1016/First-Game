#pragma once
// 


// 오늘의 이야기 : 클래스와 클래스 사이의 관계란>

// 이 질문을 이해하려면 먼저 클래스가 나타내는 개념이 뭔지 다시 알아봐야.

// 그래서 클래스가 뭐였더라? 프로그램을 하나의 작품이라고 비유했을때,

// 그 작품 속에서 독립된 범위를 가지고 움직이는 가상의 구분 가능한 대상

// 말하자면 등장인물, 말하자면 아이템, 말하자면 그 인물이 하는 "행위"

// 무엇이든 해당 개념 안에서 " 이 개념에는 이런 데이터와 이런 행동이 들어간다" 

// 이렇게 정리가 가능하다면 , 그 개념을 코드로 묘사한 것이 바로 클래스다.

// 그리고 플밍에서는 이 개념을 " 객체 " 혹은 "주체"라고 한다. (Object , subject)


// 객체: 이 대상이 다른 대상과 구분이 가능하다는 점을 강조 (독립)

// 주체: 이 대상이 (코드 지시를 통해) 직접 행동을 개시한다는 점을 강조


// 이 객체를 생각의 중심에 놓는 프로그래밍이 바로 객체 지향 프로그래밍 (oop)

// ===============================================================


// 요약하자면 , 클래스는 곧 객체다 (정확히는 객체의 설계도다 = 인스턴스가 필요)

// 사람으로 치면 DNA가 클래스 , 실제로 태어난 '나' 는 인스턴스 , 합치면 '객체'

//------------------------------------------------------------------------------


// 그러니까 클래스 = 객체라면 ... 클래스와 클래스 사이의 관계란?

// 현실의 객체가 가지는 상호 관계와 크게 다를 게 없다.

// 현실의 객체가 가지는 상호 관꼐는 다시 나누면 크게 두가지

// 하나는 "집합" = 완전히 독립 가능한 A,B의 객체가 접점을 가지고 만난 것

// '나'와 '너', 혹은 한 가족 , 혹은 갑과 을 , 혹은 우리 동네 ... 등.


// 그리고 다른 한 가지 관계는...

// "소속"

// 뗴어놓을 수 없는 C,D의 객체가 있고 , 한쪽이 다른 ㅉ한쪽을 포함하는 것.

// 학원과 강사, 가족과 가족의 구성원 , 사람과 그 사람의 행동, 그리고 시리얼과 우유

// 사람과 그 사람의 '신분' 혹은 '정체성'  이런 것도 소속이다

// 특히 예시가 뒤로 갈 수록 포함의 개념이 소속된 개념과 크게 다르지 않기도 하다

// 예 : "나나라는 사람과" + "나의 신분" <- 제 3장 입장에서 보면 그게 그거 아닌가요?






// 그러면 , 클래스가 프로그래밍이 가능한 문법이니까

// 이런 클래스 간의 관꼐 또한 프로그래밍 가능한 문법으로 존재하지 않을까?

// 이를테면 객체 A와 객체 B의 공존 <= 그냥 인스턴스 따로 만들면 자동으로 실현됨

// 그리고, 객체 A인데 , B이기도 한 존재... 즉 소속의 관계를 가진 객체

// -> 답은 있다.


// -> 오늘의 진도: 클래스가 소속의 관꼐를 가질 떄 , 문법으로 구현하는 법
