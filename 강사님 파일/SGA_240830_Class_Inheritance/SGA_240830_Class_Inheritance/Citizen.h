#pragma once

// 시민 클래스, 인간 클래스에 소속된 (혹은 인간이기도 한) 개념

// 다른 클래스의 개념에 소속된 이런 클래스를 자식 클래스라고 한다
//                                       (child)

// * 주의 : c++은 같은 폴더 안에 있어도 코드로 직접 지정을 안 해주면
//          여기에 무슨 클래스가 얼마나 더 있는지 모른다 (알려고 하지 않는다)
//          그러므로 한 파일에서 다른 파일 속 데이터를 쓰고 싶다면

//          반드시!! 그 파일의 이름을 호출해서 포함시켜야 한다.
//          (단 A 파일을 포함했는데 A 파일 안에 B가 포함됐으면, B도 여기서 사용가능)

#include "Human.h" // <- 부모 클래스를 이어받기 위한 부모 클래스 파일 불러오기

//class Citizen : Human   // 클래스 이름 옆 : 표시 = 이 클래스가 다른 클래스의
                          // 일부분을 이어받는다는 뜻. 즉 자식 클래스임을 표현
                          // : 표시 뒤에 오는 클래스명이 부모 클래스의 이름

class Citizen : public Human // 부모 클래스 앞 접근지정자 : 최대 허용 접근권한
{
    // 위 선언을 통해 시민 클래스는 인간의 자식 클래스임을 표시
    
    // * 부모 클래스 앞 접근지정자는 또 무엇인가?
    //   -> 클래스에 원래 접근지정자가 기본값이 있다. 바로 private이다
    //      다시 말해, 따로 접근지정자를 윗줄에 안 적으면 해당 데이터는
    //      기본적으로 밖에 공개되지 않는다.
    
    //   -> 이는 부모 클래스 지정에도 적용된다.
    //      = 부모 클래스 이름 앞에 접근지정자가 없으면 기본이 private.
    //      = private보다 큰 접근 권한을 주지 않는다.
    //      = 부모 클래스에 public이 있었어도 밖에서 못 부른다

    //   -> 하지만 부모 클래스 앞에 public을 붙여주면 부를 수 있다.

    // 또한 접근 지정자가 public으로 지정된 시점에서 최대 public까지 허용됐으므로
    // 이에 따라 protected 역시 자동으로 허용되는 셈

    // *단, 부모 클래스 앞에 public을 붙여줬다고 해서
    //  부모 클래스에서 private이나 protected였던 것이 public이 되지는 않는다

    // (=접근지정자를 안 붙이거나, private으로 지정함으로써 제한은 걸 수 있는데
    //   반대로 public을 써서 풀어줄 수는 없다.)

public: // 공개용

    int birthday; // 생년월일
    void Subway(); // 지하철 타기

    // 보호 데이터를 사용하기 위한 공개용 함수
    void WorkoutAsHuman(); // 인간으로서 운동하기

private: // 비공개

    int driver;  // 운전면허증 번호
    void Driver();  // 차 운전하기

protected:  // 보호된 데이터

    int cash;            // 현금
    void GoDoctor();     //병원 가기

    // 이 데이터는 다시, main()에서는 못 부른다
    // 하지만 시민의 자식 클래스가 또 있게 된다면? -> 다른 자식 클래스로 확인
};

