#pragma once

// 샘플 싱글턴 클래스

class SampleSingleton
{
    // 싱글턴 클래스가 마땅히 가져야 하는 것?

    // 1. 생성자 (보통 다 갖고 있음)
    // 2. 소멸자 (1과 한 세트)

    // 3. 자기 자신을 지정하는 정적 데이터 :
    //    -> 자기 자신을 유일무이한 존재로 지정을 해주어야 하니까!

    // 4. 그렇게 만들어진 정적인 인스턴스를 호출하기 위한 겟터

    // ---------------------------------------------------------

    // -> 다시 말해, 자기 자신이 '유일한 객체'로만 존재한다고 규칙을 정해두고
    //    밖에서는 겟터(Get() 등으로 이름 붙인 함수) 수단을 통해서만
    //    간접적으로 데이터를 찾아올 수 있게 만들려는 것

    //   -> 이게 싱글턴의 원리.

    // ....그런데 여기에 덧붙여서 한 가지 더.
    // -> 혹시 생성자가 아무데서나 만들어지면? 정적으로 만드는 의미가 없거나, 오류 나거나.

    // -> 생성자는 오히려 private 등으로 만드는 경우가 많다

    // -------------------------------------------------------

    // 여기까지 살펴본 구상을 코드로 직접 만들어보자

public: // 밖에서도 부를 수 있는 기능

    static SampleSingleton* Get()  // 겟터 함수
                                   // 이 함수를 호출하면 이 클래스의
                                   // 원래 데이터가 반환된다.

    {
        // 이 클래스의 유일무이한 데이터를 밖에서 호출하게 해주는 함수
        // 해당 데이터의 이름은 헤더에서 확인 : 여기서는 instance

        // 먼저 instance가 있는지 없는지부터 확인
        if (instance == nullptr) // nullptr : '포인터가 없거나, 데이터가 포인터로 인정되지 않음'
                                 // 즉 instance가 nullptr : 아직 지정값이 없다
                                 // 따라서 아직 instance가 없다
        {
            // instance가 존재하지 않는다면 -> 새로 하나 만든다.
            instance = new SampleSingleton(); // 인수를 하나 주고 생성
        }

        // instance가 없었다면 윗줄에서 만들어졌을 것.
        // instance가 있다면 static으로 확고하게, 유일하게 존재할 것

        // 그러므로 그 데이터를 반환하면 된다
        return instance;

    }

    static void Delete()           // 소멸자 대체용
    {
        // 소멸자를 밖에서 부르거나 관리하지 못하니까
        // 밖에서 이 데이터를 지워달라고 요청할 수 있도록

        delete instance; // delete : 지시어 중 하나. 용어로 표현하면 '포인터의 할당 권한을 반환'
                         // 정확히는 "이 메모리는 이제 주인이 없으니까 맘대로 쓰세요"
                         // 그래서 데이터는 남기도, 안 남기도 하지만, 컴퓨터는 언제든 이 주소에
                         // 필요하면 다른 데이터를 쓸 수 있다.

        instance = nullptr; // 이 변수 값도 이제 포인터가 아니라고 지정

        // 이러면 클래스가 스스로 소멸자를 부르지 않아도,
        // 외부에서 클래스를 바로 지우지 못해도,
        // instance 데이터는 지울 수가 있다.

    }

    static SampleSingleton* instance;   // 이 클래스의 객체
                                        // ...인스턴스를 클래스 안에 만들어도 되냐?
                                        // 보통은 클래스로 인스턴스를 만들면
                                        // 자동으로 인스턴스가 생기니 필요없었지만
                                        // 이건 유일무이하게 오직 하나, 그리고 반드시
                                        // 하나는 있어야 하므로 클래스 안에 확실하게 만들어둔다.

private:

    SampleSingleton()                   // 생성자. 밖에서 못 부름
                                        // = 이 클래스 스스로가 아니면
                                        //   어느 누구도 인스턴스 못 만듬
    {
        // 인스턴스의 진짜 생성자
        // 오직 인스턴스가 존재하지 않았을 때, Get 함수에 의해서만 호출

        data = 0;
    }

    ~SampleSingleton() {}                // 소멸자

public:

    int data;                           // 이 클래스가 가진 데이터

};

// 전역 변수 설정은 main 함수가 있는 곳에서 진행합니다.