#pragma once
#include <iostream>

class MyCharacter
{
    // 클래스 응용 과정을 보기 위한 교본 클래스
    // * 강의 전 원래의 형태를 보고 싶으시면 MyCharacterBase 클래스를 보세요.

public:
    MyCharacter();   // 생성자

    // 생성자 : 클래스가 만들어질 때 (선언될 때) 실행하는 특수 함수
    // -> 그런데 이러면 클래스가 없어질 때 실행하는 특수 함수도 있어야지 않을까

    // -> 그래서 만들어진 특수 함수, 클래스가 지워지거나, 사용이 끝나거나,
    //    사용자의 지시, 혹은 컴퓨터에 의해 삭제될 때 실행하는 특수 함수를...

    // ..."소멸자"라고 지칭한다

    // 소멸자의 작성도 생성자처럼 정해져 있다 (임의로 변경 불가)

    // 소멸자 작성 방법 : 생성자 앞에 '삭제'를 뜻하는 ~(탭 위 키를 시프트와 누르기)
    //                   연산자를 붙여주면 된다

    ~MyCharacter(); // 이 클래스의 소멸자
    
    // 소멸자의 사용은 main에서 알아보기

    // 소멸자 문법의 특수성을 이해하기 위한 비교 작성
    //void Test();
    //void Test();    // <- 이대로 실행하면 오류가 난다 (같은 이름)


    //-----------------------------------------------

    // 같은 이름 철자지만, 매개변수가 다른 함수를 작성
    void Set(int hitPoint, int baseDamage); // 캐릭터 설정
    
    void Set(float hitPoint, float baseDamage); // 매개변수를 float으로 작성한 것
    void Set(int hitPoint); // 매개변수의 개수가 다른 것
    void Set(); // 매개변수 없는 것 (없는 것도 다른 거니까)
    // 위 세 함수는 모두 "이름이 다른 함수"로 취급한다
    // 따라서, 중복이 아닌 걸로 친다... 어디까지나 "컴퓨터 입장에서"

    //void Set(int hp, int damage); // <- 선언 시점에서 오류 표시가 사라진다
                                  // "이미 작성이 끝난 함수"라는 뜻
                                  // = 중복이다. 실행하면...
                                  // 1. Set(int hitPoint, int baseDamage);
                                  // 쪽이 실행 (더 위에 있으니까)
                                  // 2. 다른 함수를 불렀을 때 중복판정으로 오류
                                  
                                  // -> 안 쓰는 게 최선

    // -> 매개변수의 철자는 함수 이름 판정에 영향을 주지 않는다
    //    () 안에 int a라고 하든, int z라고 하든, 컴퓨터 입장에선
    //    "그러니까 매개변수로 정수 한 개 쓴다는 거네?"라고 이해된다

    // -> 재정리 : 함수 중복 판정에는 매개변수의 자료형과 개수가 중요

    void ShowMe();                          // 캐릭터 출력

    //ShowMe의 오버로드
    void ShowMe(bool showID); // id 출력 여부를 따로 계산하는 함수


public:

    // 함수 중첩을 활용한 생성자의 오버로드가 가능할까?
    // 가능하다면... 만드는 동시에 멤버 변수 값도 넣고 얼마나 편할까!

    MyCharacter(int hp, int dmg); // 숫자 둘을 사용하는 생성자 선언
    MyCharacter(int id, int hp, int dmg); // id를 포함한 숫자 셋짜리 선언

private:

    const int id;              // id를 상수로

    int hitPoint;        // HP
    int baseDamage;      // 기본 피해량
};

